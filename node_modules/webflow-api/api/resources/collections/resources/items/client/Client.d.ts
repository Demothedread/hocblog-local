/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Webflow from "../../../../../index";
export declare namespace Items {
    interface Options {
        environment?: core.Supplier<environments.WebflowEnvironment | string>;
        accessToken: core.Supplier<core.BearerToken>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Items {
    protected readonly _options: Items.Options;
    constructor(_options: Items.Options);
    /**
     * List of all Items within a Collection. </br></br> Required scope | `CMS:read`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {Webflow.collections.ItemsListItemsRequest} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.listItems("collection_id")
     */
    listItems(collectionId: string, request?: Webflow.collections.ItemsListItemsRequest, requestOptions?: Items.RequestOptions): Promise<Webflow.CollectionItemList>;
    /**
     * Create Item in a Collection.</br></br> To create items across multiple locales, <a href="https://developers.webflow.com/data/reference/create-item-for-multiple-locales"> please use this endpoint.</a> </br></br> Required scope | `CMS:write`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {Webflow.CollectionItem} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.createItem("collection_id", {
     *         id: "42b720ef280c7a7a3be8cabe",
     *         cmsLocaleId: "653ad57de882f528b32e810e",
     *         lastPublished: "2022-11-29T16:22:43.159Z",
     *         lastUpdated: "2022-11-17T17:19:43.282Z",
     *         createdOn: "2022-11-17T17:11:57.148Z",
     *         isArchived: false,
     *         isDraft: false,
     *         fieldData: {
     *             name: "Pan Galactic Gargle Blaster Recipe",
     *             slug: "pan-galactic-gargle-blaster"
     *         }
     *     })
     */
    createItem(collectionId: string, request: Webflow.CollectionItem, requestOptions?: Items.RequestOptions): Promise<void>;
    /**
     * List of all live Items within a Collection. </br></br> Required scope | `CMS:read`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {Webflow.collections.ItemsListItemsLiveRequest} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.listItemsLive("collection_id")
     */
    listItemsLive(collectionId: string, request?: Webflow.collections.ItemsListItemsLiveRequest, requestOptions?: Items.RequestOptions): Promise<Webflow.CollectionItemList>;
    /**
     * Create live Item in a Collection. This Item will be published to the live site. </br></br> To create items across multiple locales, <a href="https://developers.webflow.com/data/reference/create-item-for-multiple-locales"> please use this endpoint.</a> </br></br> Required scope | `CMS:write`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {Webflow.CollectionItem} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.createItemLive("collection_id", {
     *         id: "42b720ef280c7a7a3be8cabe",
     *         cmsLocaleId: "653ad57de882f528b32e810e",
     *         lastPublished: "2022-11-29T16:22:43.159Z",
     *         lastUpdated: "2022-11-17T17:19:43.282Z",
     *         createdOn: "2022-11-17T17:11:57.148Z",
     *         isArchived: false,
     *         isDraft: false,
     *         fieldData: {
     *             name: "Pan Galactic Gargle Blaster Recipe",
     *             slug: "pan-galactic-gargle-blaster"
     *         }
     *     })
     */
    createItemLive(collectionId: string, request: Webflow.CollectionItem, requestOptions?: Items.RequestOptions): Promise<void>;
    /**
     * Create single Item in a Collection with multiple corresponding locales. </br></br> Required scope | `CMS:write`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {Webflow.collections.BulkCollectionItem} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.createItemForMultipleLocales("collection_id", {
     *         id: "580e64008c9a982ac9b8b754"
     *     })
     */
    createItemForMultipleLocales(collectionId: string, request: Webflow.collections.BulkCollectionItem, requestOptions?: Items.RequestOptions): Promise<void>;
    /**
     * Get details of a selected Collection Item. </br></br> Required scope | `CMS:read`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {string} itemId - Unique identifier for an Item
     * @param {Webflow.collections.ItemsGetItemRequest} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.getItem("collection_id", "item_id")
     */
    getItem(collectionId: string, itemId: string, request?: Webflow.collections.ItemsGetItemRequest, requestOptions?: Items.RequestOptions): Promise<Webflow.CollectionItem>;
    /**
     * Delete an Item from a Collection. This endpoint does not currently support bulk deletion. </br></br> Required scope | `CMS:write`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {string} itemId - Unique identifier for an Item
     * @param {Webflow.collections.ItemsDeleteItemRequest} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.deleteItem("collection_id", "item_id")
     */
    deleteItem(collectionId: string, itemId: string, request?: Webflow.collections.ItemsDeleteItemRequest, requestOptions?: Items.RequestOptions): Promise<void>;
    /**
     * Update a selected Item in a Collection. </br></br> Required scope | `CMS:write`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {string} itemId - Unique identifier for an Item
     * @param {Webflow.CollectionItem} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.updateItem("collection_id", "item_id", {
     *         id: "42b720ef280c7a7a3be8cabe",
     *         cmsLocaleId: "653ad57de882f528b32e810e",
     *         lastPublished: "2022-11-29T16:22:43.159Z",
     *         lastUpdated: "2022-11-17T17:19:43.282Z",
     *         createdOn: "2022-11-17T17:11:57.148Z",
     *         isArchived: false,
     *         isDraft: false,
     *         fieldData: {
     *             name: "Pan Galactic Gargle Blaster Recipe",
     *             slug: "pan-galactic-gargle-blaster"
     *         }
     *     })
     */
    updateItem(collectionId: string, itemId: string, request: Webflow.CollectionItem, requestOptions?: Items.RequestOptions): Promise<Webflow.CollectionItem>;
    /**
     * Get details of a selected Collection live Item. </br></br> Required scope | `CMS:read`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {string} itemId - Unique identifier for an Item
     * @param {Webflow.collections.ItemsGetItemLiveRequest} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.getItemLive("collection_id", "item_id")
     */
    getItemLive(collectionId: string, itemId: string, request?: Webflow.collections.ItemsGetItemLiveRequest, requestOptions?: Items.RequestOptions): Promise<Webflow.CollectionItem>;
    /**
     * Remove a live item from the site. Removing a published item will unpublish the item from the live site and set it to draft. This endpoint does not currently support bulk deletion. </br></br> Required scope | `CMS:write`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {string} itemId - Unique identifier for an Item
     * @param {Webflow.collections.ItemsDeleteItemLiveRequest} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.deleteItemLive("collection_id", "item_id")
     */
    deleteItemLive(collectionId: string, itemId: string, request?: Webflow.collections.ItemsDeleteItemLiveRequest, requestOptions?: Items.RequestOptions): Promise<void>;
    /**
     * Update a selected live Item in a Collection. The updates for this Item will be published to the live site. </br></br> Required scope | `CMS:write`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {string} itemId - Unique identifier for an Item
     * @param {Webflow.CollectionItem} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.updateItemLive("collection_id", "item_id", {
     *         id: "42b720ef280c7a7a3be8cabe",
     *         cmsLocaleId: "653ad57de882f528b32e810e",
     *         lastPublished: "2022-11-29T16:22:43.159Z",
     *         lastUpdated: "2022-11-17T17:19:43.282Z",
     *         createdOn: "2022-11-17T17:11:57.148Z",
     *         isArchived: false,
     *         isDraft: false,
     *         fieldData: {
     *             name: "Pan Galactic Gargle Blaster Recipe",
     *             slug: "pan-galactic-gargle-blaster"
     *         }
     *     })
     */
    updateItemLive(collectionId: string, itemId: string, request: Webflow.CollectionItem, requestOptions?: Items.RequestOptions): Promise<Webflow.CollectionItem>;
    /**
     * Publish an item or multiple items. </br></br> Required scope | `cms:write`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {Webflow.collections.ItemsPublishItemRequest} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.publishItem("collection_id", {
     *         itemIds: ["itemIds"]
     *     })
     */
    publishItem(collectionId: string, request: Webflow.collections.ItemsPublishItemRequest, requestOptions?: Items.RequestOptions): Promise<void>;
    protected _getAuthorizationHeader(): Promise<string>;
}

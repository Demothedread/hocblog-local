// Import required modules
const express = require('express');
const axios = require('axios');
const helmet = require('helmet');
const cookieParser = require('cookie-parser');
require('dotenv').config();
const { OpenAIApi, Configuration } = require('openai');

// Create an instance of the express app
const app = express();

// Apply middleware for security and parsing requests
app.use(helmet());
app.use(express.json());
app.use(express.static('public'));
app.use(cookieParser());

// Destructure environment variables
const {
  PORT,
  WEBFLOW_COLLECTION_ID,
  WEBFLOW_SITE_ID,
  WEBFLOW_API_KEY,
  OPENAI_API_KEY,
  DALLE_API_URL,
} = process.env;

// Initialize OpenAI API client
const configuration = new Configuration({
  apiKey: OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

// Middleware to initialize the Webflow client
const webflowClientMiddleware = (req, res, next) => {
  req.webflow = axios.create({
    baseURL: `https://api.webflow.com/sites/${WEBFLOW_SITE_ID}`,
    headers: {
      Authorization: `Bearer ${WEBFLOW_API_KEY}`,
      'accept-version': '1.0.0',
      'Content-Type': 'application/json',
    },
  });
  next();
};

// Apply the Webflow client middleware
app.use(webflowClientMiddleware);

// Endpoint to verify API keys
app.get('/auth', async (req, res) => {
  try {
    // Verify OpenAI API Key
    const openaiCheck = await openai.models.retrieve();
    if (!openaiCheck) {
      return res.status(400).json({ message: 'Invalid OpenAI API Key' });
    }

    // Verify Webflow API Key
    const webflowCheck = await req.webflow.get('/collections');
    if (!webflowCheck) {
      return res.status(400).json({ message: 'Invalid Webflow API Key' });
    }

    res.status(200).json({ message: 'API keys are valid' });
  } catch (error) {
    console.error('Error verifying API keys:', error.message);
    res.status(500).json({ message: 'Error verifying API keys', error: error.message });
  }
});

// Endpoint to generate a blog post
app.post('/generate-blog', async (req, res) => {
  const { topic, length, comprehension, tone, destination } = req.body;
  const prompt = `Generate a ${destination} about ${topic} with a length of ${length} words, written in a ${tone} tone, suitable for a ${comprehension} comprehension level.`;

  console.log('Prompt:', prompt);

  try {
    // Generate the blog post
    const completion = await openai.createChatCompletion({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: 'You are a helpful assistant designed to output JSON.',
        },
        { role: 'user', content: prompt },
      ],
    });

    const blogContent = completion.data.choices[0].message.content;
    console.log('ChatGPT Response:', blogContent);

    // Generate a summary of the blog post
    const summaryPrompt = `Summarize the following blog post in 250 characters: ${blogContent}`;
    const summaryCompletion = await openai.createChatCompletion({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: 'You are a helpful assistant designed to output JSON.',
        },
        { role: 'user', content: summaryPrompt },
      ],
    });

    const blogSummary = summaryCompletion.data.choices[0].message.content;
    console.log('Summary Response:', blogSummary);

    // Generate an image based on the summary
    const dalleResponse = await axios.post(
      DALLE_API_URL,
      {
        prompt: `Create an image that captures the essence of the following blog post: ${blogSummary.slice(0, 100)}`,
        n: 1,
        size: '512x512',
        response_format: 'url',
        model: 'dall-e-2',
        style: 'vivid',
      },
      {
        headers: {
          Authorization: `Bearer ${OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
      }
    );

    const imageUrl = dalleResponse.data.data[0].url;
    console.log('Image URL generated:', imageUrl);

    if (!imageUrl) {
      throw new Error('No image generated by DALL-E');
    }

    // Prepare data for Webflow CMS
    const cmsData = {
      fields: {
        'post-title': `Blog Post About ${topic}`,
        slug: `blog-post-about-${topic.toLowerCase().replace(/\s+/g, '-')}`,
        'post-body': blogContent,
        'main-image': imageUrl,
        published: true,
      },
    };

    // Add the blog post to Webflow CMS
    const webflowResponse = await req.webflow.post(
      `/collections/${WEBFLOW_COLLECTION_ID}/items`,
      { fields: cmsData }
    );

    console.log('Webflow Response:', webflowResponse.data);

    res.status(200).json({ message: 'Blog post generated and added to Webflow CMS successfully', webflowData: webflowResponse.data });
  } catch (error) {
    console.error('Error:', error.message);
    res.status(500).json({ message: 'Internal Server Error', error: error.message });
  }
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
